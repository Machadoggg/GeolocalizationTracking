@{
    ViewData["Title"] = "Monitor de Mensajeros - Medellín";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h2 class="text-center mb-4">Seguimiento de Mensajeros en Medellín</h2>
            <div id="map" style="height: 70vh; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);"></div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        #map {
            z-index: 1;
        }

        .courier-marker {
            background: none;
            border: none;
        }

        .landmark-icon {
            background-color: #e74c3c;
            border-radius: 50%;
            text-align: center;
            color: white;
            font-weight: bold;
        }

        .legend {
            padding: 10px;
            background: white;
            border-radius: 5px;
            box-shadow: 0 1px 5px rgba(0,0,0,0.4);
            line-height: 1.5;
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        // Coordenadas de Medellín (centro de la ciudad)
        const medellinCoords = [6.2442, -75.5812];

        // Puntos de referencia importantes en Medellín
        const landmarks = [
            {
                name: "Plaza Botero",
                coords: [6.2518, -75.5636],
                icon: "🎨"
            },
            {
                name: "Parque Arví",
                coords: [6.2847, -75.4931],
                icon: "🌲"
            },
            {
                name: "Poblado",
                coords: [6.2081, -75.5670],
                icon: "🏢"
            },
            {
                name: "Aeropuerto MDE",
                coords: [6.1646, -75.4231],
                icon: "✈️"
            }
        ];

        // Inicialización del mapa centrado en Medellín
        const map = L.map('map').setView(medellinCoords, 12);

        // Capa de mapa base (OpenStreetMap)
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
            maxZoom: 18
        }).addTo(map);

        // Marcador para el centro de Medellín
        L.marker(medellinCoords).addTo(map)
            .bindPopup("<b>Medellín, Colombia</b><br>Centro de monitoreo")
            .openPopup();

        // Añadir puntos de referencia
        landmarks.forEach(landmark => {
            L.marker(landmark.coords, {
                icon: L.divIcon({
                    className: 'landmark-icon',
                    html: landmark.icon,
                    iconSize: [24, 24]
                })
            }).addTo(map).bindPopup(`<b>${landmark.name}</b>`);
        });

        // Añadir leyenda
        const legend = L.control({ position: 'bottomright' });
        legend.onAdd = function (map) {
            const div = L.DomUtil.create('div', 'legend');
            div.innerHTML = `
                        <h4>Leyenda</h4>
                        🚴 Mensajero activo<br>
                        🔴 Mensajero inactivo<br>
                        🔵 Tu ubicación<br>
                        🎨 Puntos de interés
                    `;
            return div;
        };
        legend.addTo(map);

        // Conexión SignalR para actualizaciones en tiempo real
        const courierMarkers = {};
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/courierHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.on("LocationUpdated", (location) => {
            updateCourierMarker(location);
        });

        connection.on("ReceiveActiveCouriers", (couriers) => {
            couriers.forEach(courier => {
                updateCourierMarker(courier);
            });
        });

        async function start() {
            try {
                await connection.start();
                console.log("Conectado a SignalR");
                await connection.invoke("RequestCourierLocations");
            } catch (err) {
                console.log(err);
                setTimeout(start, 5000);
            }
        }

        function updateCourierMarker(location) {
            const position = [location.latitude, location.longitude];

            if (courierMarkers[location.courierId]) {
                // Actualizar posición existente
                courierMarkers[location.courierId].setLatLng(position);
            } else {
                // Crear nuevo marcador
                const marker = L.marker(position, {
                    icon: L.divIcon({
                        className: 'courier-marker',
                        html: '🚴',
                        iconSize: [30, 30]
                    })
                }).bindPopup(`<b>Mensajero ${location.courierId}</b><br>Actualizado: ${new Date(location.timestamp).toLocaleTimeString()}`);

                marker.addTo(map);
                courierMarkers[location.courierId] = marker;
            }
        }

        // Iniciar conexión
        start();

        // Geolocalización del usuario (si acepta permisos)
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition(position => {
                const userCoords = [6.345953135931642, -75.53362629970499];/* [position.coords.latitude, position.coords.longitude]; */
                L.marker(userCoords, {
                    icon: L.divIcon({
                        className: 'user-marker',
                        html: '🔵',
                        iconSize: [24, 24]
                    })
                }).addTo(map).bindPopup("<b>Tu ubicación</b>");
            });
        }
    </script>
}